#!/usr/bin/env bash
# vpnctl.sh — OpenVPN control + strict kill-switch for a local client
# Requirements: openvpn, iptables (legacy or nft wrapper), iproute2, awk, sed, grep, notify-send (optional)
set -Eeuo pipefail

# =========================[ Config ]=========================
client="laptop"                  # matches openvpn-client@...
vpn_ip="172.233.53.225"          # matches vpn IP address
vpn_if="tun0"                    # expected tunnel interface
expected_dns="1.1.1.1"           # matches /etc/resolv.conf
table_refresh=1                  # status refresh period
notify_icon="network-vpn"        # icon name for notify-send (optional)

# Colors
GREEN="\033[0;32m"; RED="\033[0;31m"; CYAN="\033[0;36m"; YELLOW="\033[1;33m"; RESET="\033[0m"

# iptables comment tag (used to find/remove our rules)
KS_TAG="VPN_KS"

# =====================[ Helpers / UX ]=======================
ok()   { printf "%b" "${GREEN}[OK]${RESET}"; }
fail() { printf "%b" "${RED}[FAIL]${RESET}"; }
info() { printf "%b\n" "${CYAN}$*${RESET}"; }
warn() { printf "%b\n" "${YELLOW}$*${RESET}"; }
err()  { printf "%b\n" "${RED}$*${RESET}" >&2; }

say() { printf "%b\n" "$*"; }
note() { command -v notify-send >/dev/null && notify-send -i "$notify_icon" "$@"; }

# run a privileged command without forcing the whole script under sudo
SUDO="sudo -n"
if ! $SUDO true 2>/dev/null; then
  sudo -v || true
fi

# =====================[ Endpoint Parse ]=====================
get_vpn_endpoint() {
  local cfg="/etc/openvpn/client/${client}.conf"
  # Read via sudo so root-only perms aren’t a problem
  if ! $SUDO test -e "$cfg"; then
    err "Missing OpenVPN config: $cfg"
    return 1
  fi

  # First non-comment 'remote' line: remote HOST PORT [proto]
  local host port proto
  read -r host port proto < <($SUDO sed -n \
    's/^\s*remote\s\+\([^ #]\+\)\s\+\([0-9]\+\)\(?:\s\+\(tcp\|udp\)\)\?.*/\1 \2 \3/p' \
    "$cfg" | head -n1)

  [[ -n "${host:-}" && -n "${port:-}" ]] || { err "Could not parse 'remote' from $cfg"; return 1; }
  [[ -z "${proto:-}" ]] && proto="udp"

  # Resolve BEFORE we flip policies; if resolution fails, we’ll use the hostname and warn.
  local ip=""
  ip="$(getent ahostsv4 "$host" | awk 'NR==1{print $1}')" || true
  [[ -z "$ip" ]] && { warn "DNS resolution failed; using hostname '$host' for iptables insert."; ip="$host"; }

  printf "%s %s %s\n" "$ip" "$port" "$proto"
}

# =====================[ IPv6 Toggle ]========================
ipv6_toggle() {
  # Get current value
  local p
  if ! p="$($SUDO sysctl -n net.ipv6.conf.all.disable_ipv6 2>/dev/null)"; then
    warn "Error: Failed to read IPv6 status."
  fi

  # Flip value
  local v=$(( 1 - p ))

  # Apply new value
  if ! $SUDO sysctl -w net.ipv6.conf.all.disable_ipv6="$v" >/dev/null 2>&1; then
    warn "Error: Failed to set IPv6 status."
  fi
}

# ===================[ Kill-switch Rules ]====================
ks_present() {
  $SUDO iptables -S 2>/dev/null | grep -q -- "--comment $KS_TAG"
}

ks_flush_all() {
  $SUDO iptables -S | awk -v tag="$KS_TAG" '$0 ~ tag {print $0}' | \
    sed -E 's/^-A /-D /' | while read -r line; do $SUDO iptables $line || true; done
  for ch in $($SUDO iptables -S | awk '/-N .*VPN_KS/{print $2}'); do
    $SUDO iptables -F "$ch" || true
    $SUDO iptables -X "$ch" || true
  done
  $SUDO iptables -P INPUT ACCEPT
  $SUDO iptables -P FORWARD ACCEPT
  $SUDO iptables -P OUTPUT ACCEPT
  ipv6_toggle
  note "VPN" "Kill-switch disabled."
  info "Kill-switch disabled."
}

ks_enable() {
  if ks_present; then
    info "Kill-switch already active."
    return 0
  fi
  local ep_ip ep_port ep_proto
  read -r ep_ip ep_port ep_proto < <(get_vpn_endpoint)
  local wan_if; wan_if="$(ip route show default 0.0.0.0/0 | awk 'NR==1{print $5}')"
  [[ -n "$wan_if" ]] || { err "Could not determine WAN interface."; return 1; }
  warn "Initializing kill-switch…"

  ipv6_toggle
  $SUDO iptables -F || true
  $SUDO iptables -X || true
  $SUDO iptables -t nat -F || true
  $SUDO iptables -t nat -X || true

  $SUDO iptables -P INPUT DROP
  $SUDO iptables -P FORWARD DROP
  $SUDO iptables -P OUTPUT DROP

  $SUDO iptables -A INPUT  -m conntrack --ctstate ESTABLISHED,RELATED -m comment --comment "$KS_TAG" -j ACCEPT
  $SUDO iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -m comment --comment "$KS_TAG" -j ACCEPT

  $SUDO iptables -A INPUT  -i lo -m comment --comment "$KS_TAG" -j ACCEPT
  $SUDO iptables -A OUTPUT -o lo -m comment --comment "$KS_TAG" -j ACCEPT

  if [[ "$ep_proto" == "udp" ]]; then
    $SUDO iptables -A OUTPUT -o "$wan_if" -p udp -d "$ep_ip" --dport "$ep_port" -m comment --comment "$KS_TAG" -j ACCEPT
    $SUDO iptables -A INPUT  -i "$wan_if" -p udp -s "$ep_ip" --sport "$ep_port" -m comment --comment "$KS_TAG" -j ACCEPT
  else
    $SUDO iptables -A OUTPUT -o "$wan_if" -p tcp -d "$ep_ip" --dport "$ep_port" -m comment --comment "$KS_TAG" -j ACCEPT
    $SUDO iptables -A INPUT  -i "$wan_if" -p tcp -s "$ep_ip" --sport "$ep_port" -m comment --comment "$KS_TAG" -j ACCEPT
  fi

  $SUDO iptables -A OUTPUT -o "tun+" -m comment --comment "$KS_TAG" -j ACCEPT
  $SUDO iptables -A OUTPUT -o "tun+" -p icmp -m comment --comment "$KS_TAG" -j ACCEPT
  $SUDO iptables -A INPUT  -i "tun+" -m comment --comment "$KS_TAG" -j ACCEPT

  note "VPN" "Kill-switch enabled."
  info "Kill-switch enabled."
}

# =====================[ Service Control ]====================
vpn_start() {
  say "${YELLOW}Connecting to VPN...${RESET}"
  $SUDO systemctl start "openvpn-client@${client}"
  if systemctl is-active --quiet "openvpn-client@${client}"; then
    say "${GREEN}VPN connected${RESET}"
    note "VPN" "Connected (${client})"
  else
    say "${RED}WARNING: VPN failed to connect${RESET}"
  fi
}

vpn_stop() {
  say "${YELLOW}Disconnecting VPN profile '${client}'...${RESET}"
  $SUDO systemctl stop "openvpn-client@${client}"
  if ! systemctl is-active --quiet "openvpn-client@${client}"; then
    say "${CYAN}VPN disconnected${CYAN}"
    note "VPN" "Disconnected (${client})"
  else
    say "${RED}WARNING: VPN failed to stop${RESET}"
  fi
}

vpn_restart() {
  say "${YELLOW}Restarting VPN profile '${client}'...${RESET}"
  $SUDO systemctl restart "openvpn-client@${client}"
  if systemctl is-active --quiet "openvpn-client@${client}"; then
    say "${GREEN}VPN restarted and connected${RESET}"
    note "VPN" "Restarted (${client})"
  else
    say "${RED}WARNING: VPN failed to restart${RESET}"
  fi
}

# =======================[ Status View ]======================
check_line() {
  local sym; [[ "$3" == 1 ]] && sym="$(ok)" || sym="$(fail)"
  printf " %-12s %-15s %-10b\n" "$1" "$2" "$sym"
}
ks_verify() { ks_present && return 0 || return 1; }

status_loop() {
  local key
  stty -echo -icanon time 0 min 0 2>/dev/null || true
  while :; do
    local ip4 ip6 vpn dns tun ksw
    ip4="$(curl -4 -s --max-time 0.6 ifconfig.me || echo "time-out")"
    ip6="$(curl -6 -s --max-time 0.6 ifconfig.me || echo "disabled")"
    vpn="$(systemctl is-active --quiet "openvpn-client@${client}" 2>/dev/null && echo active || echo inactive)"
    dns="$(grep -m1 '^nameserver' /etc/resolv.conf | awk '{print $2}' || echo "unknown")"
    tun="$([ -d "/sys/class/net/$vpn_if" ] && echo active || echo inactive)"
    ksw="$(ks_verify && echo "active" || echo "inactive")"

    local ip4_ok ip6_ok vpn_ok dns_ok tun_ok ks_ok
    [[ "$ip4" != "time-out" ]] && ip4_ok=1 || ip4_ok=0
    [[ "$ip4" == $vpn_ip    ]] && ip4_ok=1 || ip4_ok=0
    [[ "$ip6" == "disabled" ]] && ip6_ok=1 || ip6_ok=0; ip6="enabled"
    [[ "$vpn" != "inactive" ]] && vpn_ok=1 || vpn_ok=0
    [[ "$dns" == "$expected_dns" ]] && dns_ok=1 || dns_ok=0
    [[ "$tun" != "inactive" ]] && tun_ok=1 || tun_ok=0
    [[ "$ksw" != "inactive" ]] && ks_ok=1 || ks_ok=0

    printf "%b\n" "${YELLOW}┌───────────────────────────────────┐${RESET}"
    printf " %-12s %-15s %-10s\n" "SERVICE" "DETAILS" "STATUS"
    printf "%b\n" "${YELLOW}├───────────────────────────────────┤${RESET}"
    check_line "IP4 public" "$ip4" "$ip4_ok"
    check_line "IP6 status" "$ip6" "$ip6_ok"
    check_line "DNS server" "$dns" "$dns_ok"
    check_line "VPN daemon" "$vpn" "$vpn_ok"
    check_line "VPN tunnel" "$tun" "$tun_ok"
    check_line "KillSwitch" "$ksw" "$ks_ok"
    printf "%b\n" "${YELLOW}└───────────────────────────────────┘${RESET}"
    say "Time: ${CYAN}$(date +%H:%M:%S)${RESET}   (press key to exit)"
    read -r -t "$table_refresh" -n 1 key && break
    tput ed 2>/dev/null || true
    printf "\r"
  done
  stty sane 2>/dev/null || true
}

# =========================[ CLI ]============================
usage() {
  cat <<EOF
Usage: $0 {start|stop|restart|status}
  start       Start OpenVPN client and enable kill-switch
  stop        Stop OpenVPN client and disable kill-switch
  restart     Restart OpenVPN client (kill-switch stays enabled)
  status      Live status table (press any key to exit)
EOF
}

cmd="${1:-status}"
case "$cmd" in
  start)    ks_enable; vpn_start ;;
  stop)     vpn_stop; ks_flush_all ;;
  restart)  vpn_restart ;;
  status)   status_loop ;;
  *) usage; exit 1 ;;
esac

