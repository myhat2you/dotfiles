#!/bin/bash
input="$1"

# Define colors for output
GREEN="\033[0;32m"
RED="\033[0;31m"
CYAN="\033[0;36m"
YELLOW="\033[1;33m"
RESET="\033[0m"

# Function to check status and display output
check() {
    [[ "$3" == 1 ]] && status_symbol="${GREEN}[OK]${RESET}" || status_symbol="${RED}[FAIL]${RESET}"
    printf "%-12s %-16s %-10b\n" "$1" "$2" "$status_symbol"
}

ipv6_toggle(){
  ipv6_path="/proc/sys/net/ipv6/conf"

  if [[ -d $ipv6_path ]]; then
    for interface_path in "$ipv6_path"/*; do
      interface=$(basename "$interface_path") # Extract the interface name
      if [[ -w "$interface_path/disable_ipv6" ]]; then
        echo "$1" | sudo tee "$interface_path/disable_ipv6" > /dev/null
      fi
    done
  fi
}

verify_iptables() {
  # Define expected rules
  expected_rules=(
    "-P INPUT DROP"
    "-P FORWARD DROP"
    "-P OUTPUT DROP"
    "-N OUTPUT_VPN_KILL_SWITCH"
    "-N RELATED_AND_ESTABLISHED"
    "-A INPUT -j RELATED_AND_ESTABLISHED"
    "-A INPUT -s.* -i.* -p udp -m udp --sport 1194 -j ACCEPT"
    "-A OUTPUT -j OUTPUT_VPN_KILL_SWITCH"
    "-A OUTPUT -o lo -j ACCEPT"
    "-A OUTPUT -o tun+ -p icmp -j ACCEPT"
    "-A OUTPUT -d.* -j ACCEPT"
    "-A OUTPUT_VPN_KILL_SWITCH -p udp -m udp --dport 1194 -j ACCEPT"
    "-A OUTPUT_VPN_KILL_SWITCH -o tun+ -j ACCEPT"
    "-A OUTPUT_VPN_KILL_SWITCH -d.* -j ACCEPT"
    "-A RELATED_AND_ESTABLISHED -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT"
    "-A RELATED_AND_ESTABLISHED -i lo -j ACCEPT"
  )

  # Check each rule
  missing_rules=0
  for rule in "${expected_rules[@]}"; do
    sudo iptables -S | grep -- "$rule" > /dev/null || missing_rules=1
  done

  # Check if any rules are missing
  [[ $missing_rules -eq 0 ]] && return 0 || return 1
}

killswitch() {
  ks_state=$(sudo iptables -S OUTPUT | grep "VPN" )
  [[ $1 == "enable"  && -z $ks_state ]] && {
    interface="$(ip route show | awk '/default/ {print $5}')"
    loc_ip="$(ip route show | grep "$interface" | awk '/proto kernel/ {print $1}')"

    vpn_ip=""
    max_retries=10
    retry_count=0

    # Retry loop to ensure vpn_ip and loc_ip are set
    while [[ -z "$vpn_ip" ]] && [[ $retry_count -lt $max_retries ]]; do
      vpn_ip="$(ip route show | awk '/0.0.0.0\/1/ {print $3}')"
      
      echo -e "${YELLOW}Initializing kill switch...${RESET}"
      if [[ -z "$interface" || -z "$vpn_ip" || -z "$loc_ip" ]]; then
        retry_count=$((retry_count + 1))
        sleep 1
      fi
    done

    # Check if variables were set, otherwise notify and exit
    if [[ -z "$interface" || -z "$vpn_ip" || -z "$loc_ip" ]]; then
      notify-send -u critical " VPN" "Failed to initialize killswitch."
      echo -e "${RED}Failed to initialize VPN killswitch.${RESET}"
      sudo systemctl stop openvpn-client@client
      return 1
    fi

    # disable IPv6
    ipv6_toggle 1

    # Flush all chains, delete custom chains.
    sudo iptables -F
    sudo iptables -X
    sudo iptables -t nat -F
    sudo iptables -t nat -X

    # Block all traffic as default.
    sudo iptables --policy INPUT DROP
    sudo iptables --policy FORWARD DROP
    sudo iptables --policy OUTPUT DROP

    # Block all IPv6 traffic.
    sudo ip6tables --policy INPUT DROP
    sudo ip6tables --policy FORWARD DROP
    sudo ip6tables --policy OUTPUT DROP

    # Allow related and established traffic.
    sudo iptables -N RELATED_AND_ESTABLISHED
    sudo iptables -A RELATED_AND_ESTABLISHED -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A INPUT -j RELATED_AND_ESTABLISHED

    # Let's allow the loopback device.
    sudo iptables -A OUTPUT -o lo -j ACCEPT
    sudo iptables -A RELATED_AND_ESTABLISHED  -i lo -j ACCEPT 

    # Allow VPN traffic and ping.
    sudo iptables -A OUTPUT -o tun+ -p icmp -j ACCEPT
    sudo iptables -A OUTPUT -d "$loc_ip" -j ACCEPT

    # VPN kill switch chain rules.
    sudo iptables -N OUTPUT_VPN_KILL_SWITCH
    sudo iptables -A OUTPUT_VPN_KILL_SWITCH -p udp --dport 1194 -j ACCEPT
    sudo iptables -A OUTPUT_VPN_KILL_SWITCH -o tun+ -j ACCEPT
    sudo iptables -A OUTPUT_VPN_KILL_SWITCH -d "$vpn_ip" -j ACCEPT
    sudo iptables -A INPUT -j ACCEPT -s "$vpn_ip" -i "$interface" -p udp --sport 1194
    sudo iptables -I OUTPUT -j OUTPUT_VPN_KILL_SWITCH

    verify_iptables && notify-send " VPN" "Kill switch rules are active."

  }
  [[ $1 == "disable" && -n $ks_state ]] && {
    # enable IPv6
    ipv6_toggle 1
    # Delete custom rules and chains.
    sudo iptables -F
    sudo iptables -X 
    # Reset default policies.
    sudo iptables -P INPUT ACCEPT
    sudo iptables -P FORWARD ACCEPT 
    sudo iptables -P OUTPUT ACCEPT 
  }
}

case "$input" in
  "start")
    sudo systemctl start openvpn-client@client
    killswitch enable
    exit
    ;;
  "stop")
    sudo systemctl stop openvpn-client@client
    killswitch disable
    exit
    ;;
  "restart")
    sudo systemctl restart openvpn-client@client
    killswitch enable
    exit
    ;;
esac

while true; do
  # Gather system information
  ip4="$(curl -4 ifconfig.me --silent --max-time 0.5 || echo "time-out")"
  ip6="$(curl -6 ifconfig.me --silent --max-time 0.5 || echo "disabled")"
  vpn="$(systemctl is-active openvpn-client@client)"
  dns="$(grep 'nameserver' /etc/resolv.conf | awk 'NR==1 {print $2}')"
  tun="$(nmcli device status | grep -q '^tun0.* connected' && echo "active" || echo "inactive")"
  ksw="$(verify_iptables && echo "active" || echo "inactive")"

  # Evaluate statuses
  ip4_status=$([[ $ip4 != "time-out"  ]] && echo 1 || echo 0)
  ip6_status=$([[ $ip6 == "disabled"  ]] && echo 1 || echo 0)
  vpn_status=$([[ $vpn != "inactive"  ]] && echo 1 || echo 0)
  dns_status=$([[ $dns == "1.1.1.1"   ]] && echo 1 || echo 0)
  tun_status=$([[ $tun != "inactive"  ]] && echo 1 || echo 0)
  ksw_status=$([[ $ksw != "inactive"  ]] && echo 1 || echo 0)

  # Display header
  echo -e "${YELLOW}-------------------------------------${RESET}"
  printf "%-12s %-16s %-10s\n" "SERVICE" "DETAILS" "STATUS"
  echo -e "${YELLOW}-------------------------------------${RESET}"

  # Display individual statuses
  check "IP4 public" "$ip4" "$ip4_status"
  check "IP6 status" "$ip6" "$ip6_status"
  check "DNS server" "$dns" "$dns_status"
  check "VPN daemon" "$vpn" "$vpn_status"
  check "VPN tunnel" "$tun" "$tun_status"
  check "KillSwitch" "$ksw" "$ksw_status"

  # Footer with timestamp
  echo -e "${YELLOW}-------------------------------------${RESET}"
  echo -e "Time: ${CYAN}$(date +%H:%M:%S)${RESET}"
  sleep 1s
done
